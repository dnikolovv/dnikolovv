{"componentChunkName":"component---src-templates-blog-post-js","path":"/practical-haskell-deriving-via/","result":{"data":{"site":{"siteMetadata":{"title":"Crossing the river by feeling the stones"}},"markdownRemark":{"id":"f7bdef48-2f11-535a-9837-dc383c20cc7f","excerpt":"This short post is part of the Practical Haskell Bits initiative. Visit the repository to find out more real-world examples like this. Imagine we have defined a…","html":"<blockquote>\n<p>This short post is part of the <a href=\"/practical-haskell-bits-initiative/\">Practical Haskell Bits initiative</a>. Visit the <a href=\"https://github.com/dnikolovv/practical-haskell\">repository</a> to find out more real-world examples like this.</p>\n</blockquote>\n<p>Imagine we have defined a typeclass for communicating with some external API.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">class</span> <span class=\"token constant\">ExternalAPI</span> <span class=\"token hvariable\">m</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">getExternal</span> <span class=\"token operator\">::</span> <span class=\"token constant\">ExternalThingId</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token constant\">ExternalThing</span></code></pre></div>\n<p>We define some abstract implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">getExternalImpl</span> <span class=\"token operator\">::</span>\n  <span class=\"token constant\">MonadIO</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=></span>\n  <span class=\"token constant\">ExternalThingId</span> <span class=\"token operator\">-></span>\n  <span class=\"token hvariable\">m</span> <span class=\"token constant\">ExternalThing</span>\n<span class=\"token hvariable\">getExternalImpl</span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></code></pre></div>\n<p>And add an instance to our application monad:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">instance</span> <span class=\"token constant\">ExternalAPI</span> <span class=\"token constant\">AppM</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">getExternal</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">getExternalImpl</span></code></pre></div>\n<p>But what if we need an instance of <code class=\"language-text\">ExternalAPI</code> for some other monad as well?</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">instance</span> <span class=\"token constant\">ExternalAPI</span> <span class=\"token constant\">AnotherAppM</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">getExternal</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">getExternalImpl</span></code></pre></div>\n<p>This is not too terrible, but now every time we change the <code class=\"language-text\">ExternalAPI</code> interface, we need to change the instance definitions as well. Also, we need to export and depend on implementation details such as <code class=\"language-text\">getExternalImpl</code>, which is error prone and can quickly get tedious.</p>\n<p>Using <code class=\"language-text\">DerivingVia</code>, we can make this a lot more elegant.</p>\n<p>Let’s define 2 abstract implementations for ExternalAPI: one mocked for testing, and one real one for production</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Mocked implementation</span>\n<span class=\"token keyword\">newtype</span> <span class=\"token constant\">MockedExternalAPI</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MockedExternalAPI</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">instance</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">MonadIO</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">ExternalAPI</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">MockedExternalAPI</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">getExternal</span> <span class=\"token hvariable\">externalId</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MockedExternalAPI</span> <span class=\"token operator\">$</span> <span class=\"token keyword\">do</span>\n    <span class=\"token hvariable\">liftIO</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">putStrLn</span> <span class=\"token operator\">$</span> <span class=\"token string\">\"Called mocked getExternal with id \"</span> <span class=\"token operator\">&lt;></span> <span class=\"token builtin\">show</span> <span class=\"token hvariable\">externalId</span> <span class=\"token operator\">&lt;></span> <span class=\"token string\">\"...\"</span>\n    <span class=\"token hvariable\">pure</span> <span class=\"token constant\">ExternalThing</span>\n  <span class=\"token hvariable\">postExternal</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MockedExternalAPI</span> <span class=\"token operator\">$</span> <span class=\"token keyword\">do</span>\n    <span class=\"token hvariable\">liftIO</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"Called mocked postExternal...\"</span>\n    <span class=\"token hvariable\">pure</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\">-- \"Real\" implementation</span>\n<span class=\"token keyword\">newtype</span> <span class=\"token constant\">RealExternalAPIClient</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token constant\">RealExternalAPIClient</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">instance</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">MonadIO</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">ExternalAPI</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealExternalAPIClient</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">getExternal</span> <span class=\"token hvariable\">externalId</span> <span class=\"token operator\">=</span> <span class=\"token constant\">RealExternalAPIClient</span> <span class=\"token operator\">$</span>\n    <span class=\"token hvariable\">liftIO</span> <span class=\"token operator\">$</span> <span class=\"token keyword\">do</span>\n      <span class=\"token builtin\">putStrLn</span> <span class=\"token operator\">$</span> <span class=\"token string\">\"Calling real API with id \"</span> <span class=\"token operator\">&lt;></span> <span class=\"token builtin\">show</span> <span class=\"token hvariable\">externalId</span> <span class=\"token operator\">&lt;></span> <span class=\"token string\">\"...\"</span>\n      <span class=\"token hvariable\">threadDelay</span> <span class=\"token operator\">$</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">500</span> <span class=\"token comment\">-- Half a second</span>\n      <span class=\"token hvariable\">pure</span> <span class=\"token constant\">ExternalThing</span>\n\n  <span class=\"token hvariable\">postExternal</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token constant\">RealExternalAPIClient</span> <span class=\"token operator\">$</span>\n    <span class=\"token hvariable\">liftIO</span> <span class=\"token operator\">$</span> <span class=\"token keyword\">do</span>\n      <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"Posting to the real API...\"</span>\n      <span class=\"token hvariable\">threadDelay</span> <span class=\"token operator\">$</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">500</span>\n      <span class=\"token hvariable\">pure</span> <span class=\"token number\">123</span></code></pre></div>\n<p>Things have become a tad more abstract.</p>\n<p>We have defined two wrappers: <code class=\"language-text\">MockedExternalAPI</code> and <code class=\"language-text\">RealExternalAPIClient</code> and said that if the inner <code class=\"language-text\">m</code> has a <code class=\"language-text\">MonadIO</code> instance, we can give back an <code class=\"language-text\">ExternalAPI</code> implementation.</p>\n<p>Now for our application monads we can do</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- The real application monad that handles your business logic</span>\n<span class=\"token keyword\">newtype</span> <span class=\"token constant\">AppM</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token constant\">AppM</span> <span class=\"token punctuation\">{</span><span class=\"token hvariable\">runAppM</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IO</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">deriving</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">ExternalAPI</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">via</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealExternalAPIClient</span> <span class=\"token constant\">AppM</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- A monad that you use for testing</span>\n<span class=\"token keyword\">newtype</span> <span class=\"token constant\">TestAppM</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token constant\">TestAppM</span> <span class=\"token punctuation\">{</span><span class=\"token hvariable\">runTestAppM</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IO</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">deriving</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">ExternalAPI</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">via</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">MockedExternalAPI</span> <span class=\"token constant\">TestAppM</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This clears up a few things:</p>\n<ol>\n<li>We don’t need to depend on implementation details such as <code class=\"language-text\">getExternalImpl</code>.</li>\n<li>We have reduced boilerplate.</li>\n<li>We don’t need to change every instance site when we change the <code class=\"language-text\">ExternalAPI</code> interface.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">demo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">demo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token hvariable\">runAppM</span> <span class=\"token hvariable\">externalAPIAction</span>\n  <span class=\"token hvariable\">runTestAppM</span> <span class=\"token hvariable\">externalAPIAction</span>\n  <span class=\"token keyword\">where</span>\n    <span class=\"token hvariable\">externalAPIAction</span> <span class=\"token operator\">::</span>\n      <span class=\"token constant\">Monad</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=></span>\n      <span class=\"token constant\">ExternalAPI</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=></span>\n      <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token hvariable\">externalAPIAction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n      <span class=\"token hvariable\">void</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">getExternal</span> <span class=\"token number\">123</span>\n      <span class=\"token hvariable\">void</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">postExternal</span> <span class=\"token constant\">ExternalThing</span></code></pre></div>\n<p>You can find the complete example <a href=\"https://github.com/dnikolovv/practical-haskell/tree/main/deriving-via/src\">here</a>.</p>\n<blockquote>\n<p>This short post is part of the <a href=\"/practical-haskell-bits-initiative/\">Practical Haskell Bits initiative</a>. Visit the <a href=\"https://github.com/dnikolovv/practical-haskell\">repository</a> to find out more real-world examples like this.</p>\n</blockquote>","frontmatter":{"title":"Using `DerivingVia` to magically derive instances","date":"September 10, 2022","description":"Reduce boilerplate and increase elegancy"}},"previous":{"fields":{"slug":"/practical-haskell-bits-initiative/"},"frontmatter":{"title":"The \"Practical Haskell Bits\" initiative"}},"next":null},"pageContext":{"id":"f7bdef48-2f11-535a-9837-dc383c20cc7f","previousPostId":"4ff7c874-1502-5aaa-80d4-dc5248e6aaf6","nextPostId":null}},"staticQueryHashes":["230163734","2841359383"]}