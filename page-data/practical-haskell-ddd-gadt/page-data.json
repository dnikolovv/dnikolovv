{"componentChunkName":"component---src-templates-blog-post-js","path":"/practical-haskell-ddd-gadt/","result":{"data":{"site":{"siteMetadata":{"title":"Crossing the river by feeling the stones"}},"markdownRemark":{"id":"0be2ffa4-5099-5ac7-aefe-6513c6b56ce8","excerpt":"This short post is part of the Practical Haskell Bits initiative. Visit the repository to find out more real-world examples like this. Let’s imagine we’re in…","html":"<blockquote>\n<p>This short post is part of the <a href=\"/practical-haskell-bits-initiative/\">Practical Haskell Bits initiative</a>. Visit the <a href=\"https://github.com/dnikolovv/practical-haskell\">repository</a> to find out more real-world examples like this.</p>\n</blockquote>\n<p>Let’s imagine we’re in the context of an online store.</p>\n<p>We have an <code class=\"language-text\">Order</code> type that has two possible states - <code class=\"language-text\">Outstanding</code> and <code class=\"language-text\">PaidFor</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">OrderStatus</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Outstanding</span> <span class=\"token operator\">|</span> <span class=\"token constant\">PaidFor</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token constant\">ShipmentInfo</span> <span class=\"token operator\">=</span>\n  <span class=\"token constant\">AwaitingShipment</span> <span class=\"token operator\">|</span>\n  <span class=\"token constant\">Shipped</span> <span class=\"token constant\">TrackingNumber</span> <span class=\"token constant\">ShippedAt</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token constant\">Order</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Order</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token builtin\">id</span> <span class=\"token operator\">::</span> <span class=\"token constant\">OrderId</span><span class=\"token punctuation\">,</span>\n    <span class=\"token hvariable\">created</span> <span class=\"token operator\">::</span> <span class=\"token constant\">CreatedAt</span><span class=\"token punctuation\">,</span>\n    <span class=\"token hvariable\">items</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">OrderItem</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token hvariable\">status</span> <span class=\"token operator\">::</span> <span class=\"token constant\">OrderStatus</span><span class=\"token punctuation\">,</span>\n    <span class=\"token hvariable\">shipmentInfo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">ShipmentInfo</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>While writing our business logic, we realize that we’re often doing error prone validations.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">refundOrder</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Order</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">refundOrder</span> <span class=\"token hvariable\">order</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token hvariable\">when</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">status</span> <span class=\"token hvariable\">order</span> <span class=\"token operator\">==</span> <span class=\"token constant\">PaidFor</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span>\n    <span class=\"token builtin\">error</span> <span class=\"token string\">\"This order has already been paid for.\"</span>\n  <span class=\"token operator\">...</span>\n\n<span class=\"token hvariable\">markAsShipped</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Order</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">markAsShipped</span> <span class=\"token hvariable\">order</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token hvariable\">unless</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">status</span> <span class=\"token hvariable\">order</span> <span class=\"token operator\">==</span> <span class=\"token constant\">PaidFor</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span>\n    <span class=\"token builtin\">error</span> <span class=\"token string\">\"Order must be paid for.\"</span>\n\n  <span class=\"token hvariable\">unless</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">shipmentInfo</span> <span class=\"token hvariable\">order</span> <span class=\"token operator\">==</span> <span class=\"token constant\">Just</span> <span class=\"token constant\">AwaitingShipment</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span>\n    <span class=\"token builtin\">error</span> <span class=\"token string\">\"Order must be awaiting shipment.\"</span></code></pre></div>\n<p>This would pass the bar in most languages, but it feels like we may be underutilizing Haskell’s type system, so we want to refactor. There’s multiple approaches that we could take to make this situation better, but today we’ll take a look at <a href=\"https://en.wikibooks.org/wiki/Haskell/GADT\">GADTs (Generalized Algebraic Data Types)</a>.</p>\n<p>Using GADTs, first we can move the <code class=\"language-text\">OrderStatus</code> to the type level.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">{-# LANGUAGE DataKinds #-}</span>\n<span class=\"token comment\">{-# LANGUAGE GADTs #-}</span>\n<span class=\"token comment\">{-# LANGUAGE KindSignatures #-}</span>\n\n<span class=\"token comment\">-- Rename Order to OrderData and remove the status and shipmentInfo</span>\n<span class=\"token keyword\">data</span> <span class=\"token constant\">OrderData</span> <span class=\"token operator\">=</span> <span class=\"token constant\">OrderData</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">-- status :: OrderStatus,</span>\n    <span class=\"token comment\">-- shipmentInfo :: Maybe ShipmentInfo</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">-- Define a new `Order` type that's a lot more type safe</span>\n<span class=\"token keyword\">data</span> <span class=\"token constant\">Order</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">status</span> <span class=\"token operator\">::</span> <span class=\"token constant\">OrderStatus</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span>\n  <span class=\"token constant\">OutstandingOrder</span> <span class=\"token operator\">::</span> <span class=\"token constant\">OrderData</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Order</span> '<span class=\"token constant\">Outstanding</span>\n  <span class=\"token constant\">PaidOrder</span> <span class=\"token operator\">::</span> <span class=\"token constant\">OrderData</span> <span class=\"token operator\">-></span> <span class=\"token constant\">ShipmentInfo</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Order</span> '<span class=\"token constant\">PaidFor</span></code></pre></div>\n<p>This allows us to explictly mark the order type we want to work with</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">markAsPaid</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Order</span> '<span class=\"token constant\">Outstanding</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">markAsPaid</span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n\n<span class=\"token hvariable\">markAsShipped</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Order</span> '<span class=\"token constant\">PaidFor</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">markAsShipped</span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n\n<span class=\"token hvariable\">refundOrder</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Order</span> '<span class=\"token constant\">PaidFor</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">refundOrder</span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n\n<span class=\"token comment\">-- Or we can just ignore the type if we don't care about it</span>\n<span class=\"token hvariable\">getAllOrders</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Order</span> <span class=\"token hvariable\">status</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">getAllOrders</span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></code></pre></div>\n<p>It also allows us to drastically reduce the validations needed. In fact, the previously “illegal states” are now unrepresentable.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">refundOrder</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Order</span> '<span class=\"token constant\">PaidFor</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">refundOrder</span> <span class=\"token hvariable\">order</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token comment\">-- We don't need to validate the status as</span>\n  <span class=\"token comment\">-- it cannot be anything different than `PaidFor`</span>\n  <span class=\"token operator\">...</span>\n\n<span class=\"token hvariable\">markAsShipped</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Order</span> '<span class=\"token constant\">PaidFor</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">markAsShipped</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">PaidOrder</span> <span class=\"token hvariable\">orderData</span> <span class=\"token hvariable\">shipmentInfo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token comment\">-- We've stated in the type signature that</span>\n  <span class=\"token comment\">-- `markAsShipped` works with orders that are PaidFor.</span>\n  <span class=\"token comment\">-- Since `ShipmentInfo` on `PaidOrder` is no longer a `Maybe`,</span>\n  <span class=\"token comment\">-- we don't need to validate anything.</span>\n  <span class=\"token operator\">...</span></code></pre></div>\n<p>We used this approach in <a href=\"https://github.com/theam/aws-lambda-haskell-runtime\"><code class=\"language-text\">aws-lambda-haskell-runtime</code></a>. Since Lambda results and errors must have a differently formatted body depending on the proxy (API Gateway, ALB, etc.), we used GADTs to make illegal states unrepresentable.</p>\n<p>Find the complete code example <a href=\"https://github.com/dnikolovv/practical-haskell/blob/main/gadt-ddd/src/Lib.hs\">here</a>.</p>\n<blockquote>\n<p>This short post is part of the <a href=\"/practical-haskell-bits-initiative/\">Practical Haskell Bits initiative</a>. Visit the <a href=\"https://github.com/dnikolovv/practical-haskell\">repository</a> to find out more real-world examples like this.</p>\n</blockquote>","frontmatter":{"title":"Domain Driven Design using GADTs","date":"September 11, 2022","description":"One way of making illegal states unrepresentable."}},"previous":{"fields":{"slug":"/practical-haskell-deriving-via/"},"frontmatter":{"title":"Using `DerivingVia` to magically derive instances"}},"next":null},"pageContext":{"id":"0be2ffa4-5099-5ac7-aefe-6513c6b56ce8","previousPostId":"f7bdef48-2f11-535a-9837-dc383c20cc7f","nextPostId":null}},"staticQueryHashes":["230163734","2841359383"]}