<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Intrusive thoughts RSS Feed]]></title><description><![CDATA[The blog of a Haskeller.]]></description><link>https://dnikolovv.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 10 Sep 2022 12:25:50 GMT</lastBuildDate><item><title><![CDATA[Using `DerivingVia` to magically derive instances]]></title><description><![CDATA[This short post is part of the Practical Haskell Bits initiative. Visit the repository to find out more real-world examples like this…]]></description><link>https://dnikolovv.github.io/practical-haskell-deriving-via/</link><guid isPermaLink="false">https://dnikolovv.github.io/practical-haskell-deriving-via/</guid><pubDate>Sat, 10 Sep 2022 09:52:55 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;This short post is part of the &lt;a href=&quot;/practical-haskell-bits-initiative/&quot;&gt;Practical Haskell Bits initiative&lt;/a&gt;. Visit the &lt;a href=&quot;https://github.com/dnikolovv/practical-haskell&quot;&gt;repository&lt;/a&gt; to find out more real-world examples like this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Imagine we have defined a typeclass for communicating with some external API.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalAPI&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;token hvariable&quot;&gt;getExternal&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalThingId&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalThing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We define some abstract implementation:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;getExternalImpl&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;MonadIO&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;ExternalThingId&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;
  &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalThing&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;getExternalImpl&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And add an instance to our application monad:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalAPI&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AppM&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;token hvariable&quot;&gt;getExternal&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;getExternalImpl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what if we need an instance of &lt;code class=&quot;language-text&quot;&gt;ExternalAPI&lt;/code&gt; for some other monad as well?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalAPI&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AnotherAppM&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;token hvariable&quot;&gt;getExternal&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;getExternalImpl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not too terrible, but now every time we change the &lt;code class=&quot;language-text&quot;&gt;ExternalAPI&lt;/code&gt; interface, we need to change the instance definitions as well. Also, we need to export and depend on implementation details such as &lt;code class=&quot;language-text&quot;&gt;getExternalImpl&lt;/code&gt;, which is error prone and can quickly get tedious.&lt;/p&gt;
&lt;p&gt;Using &lt;code class=&quot;language-text&quot;&gt;DerivingVia&lt;/code&gt;, we can make this a lot more elegant.&lt;/p&gt;
&lt;p&gt;Let’s define 2 abstract implementations for ExternalAPI: one mocked for testing, and one real one for production&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- Mocked implementation&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;MockedExternalAPI&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;MockedExternalAPI&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MonadIO&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalAPI&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MockedExternalAPI&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;token hvariable&quot;&gt;getExternal&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;externalId&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;MockedExternalAPI&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;liftIO&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Called mocked getExternal with id &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;externalId&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalThing&lt;/span&gt;
  &lt;span class=&quot;token hvariable&quot;&gt;postExternal&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;MockedExternalAPI&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;liftIO&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Called mocked postExternal...&quot;&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- &quot;Real&quot; implementation&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;RealExternalAPIClient&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;RealExternalAPIClient&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MonadIO&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalAPI&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;RealExternalAPIClient&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;token hvariable&quot;&gt;getExternal&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;externalId&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;RealExternalAPIClient&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;liftIO&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;token builtin&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Calling real API with id &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;externalId&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt;
      &lt;span class=&quot;token hvariable&quot;&gt;threadDelay&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- Half a second&lt;/span&gt;
      &lt;span class=&quot;token hvariable&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalThing&lt;/span&gt;

  &lt;span class=&quot;token hvariable&quot;&gt;postExternal&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;RealExternalAPIClient&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;liftIO&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;token builtin&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Posting to the real API...&quot;&lt;/span&gt;
      &lt;span class=&quot;token hvariable&quot;&gt;threadDelay&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;
      &lt;span class=&quot;token hvariable&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things have become a tad more abstract.&lt;/p&gt;
&lt;p&gt;We have defined two wrappers: &lt;code class=&quot;language-text&quot;&gt;MockedExternalAPI&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;RealExternalAPIClient&lt;/code&gt; and said that if the inner &lt;code class=&quot;language-text&quot;&gt;m&lt;/code&gt; has a &lt;code class=&quot;language-text&quot;&gt;MonadIO&lt;/code&gt; instance, we can give back an &lt;code class=&quot;language-text&quot;&gt;ExternalAPI&lt;/code&gt; implementation.&lt;/p&gt;
&lt;p&gt;Now for our application monads we can do&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- The real application monad that handles your business logic&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AppM&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AppM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;runAppM&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ExternalAPI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;via&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;RealExternalAPIClient&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AppM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- A monad that you use for testing&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TestAppM&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TestAppM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;runTestAppM&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ExternalAPI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;via&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MockedExternalAPI&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TestAppM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This clears up a few things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We don’t need to depend on implementation details such as &lt;code class=&quot;language-text&quot;&gt;getExternalImpl&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We have reduced boilerplate.&lt;/li&gt;
&lt;li&gt;We don’t need to change every instance site when we change the &lt;code class=&quot;language-text&quot;&gt;ExternalAPI&lt;/code&gt; interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;demo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;demo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;token hvariable&quot;&gt;runAppM&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;externalAPIAction&lt;/span&gt;
  &lt;span class=&quot;token hvariable&quot;&gt;runTestAppM&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;externalAPIAction&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;externalAPIAction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;
      &lt;span class=&quot;token constant&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
      &lt;span class=&quot;token constant&quot;&gt;ExternalAPI&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
      &lt;span class=&quot;token hvariable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token hvariable&quot;&gt;externalAPIAction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;token hvariable&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;getExternal&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;
      &lt;span class=&quot;token hvariable&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;postExternal&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ExternalThing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find the complete example &lt;a href=&quot;https://github.com/dnikolovv/practical-haskell/tree/main/deriving-via/src&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This short post is part of the &lt;a href=&quot;/practical-haskell-bits-initiative/&quot;&gt;Practical Haskell Bits initiative&lt;/a&gt;. Visit the &lt;a href=&quot;https://github.com/dnikolovv/practical-haskell&quot;&gt;repository&lt;/a&gt; to find out more real-world examples like this.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[The "Practical Haskell Bits" initiative]]></title><description><![CDATA[It happens to all of us. Once in a while you stumble upon a problem that seems way too familiar. You remember that you’ve either solved it…]]></description><link>https://dnikolovv.github.io/practical-haskell-bits-initiative/</link><guid isPermaLink="false">https://dnikolovv.github.io/practical-haskell-bits-initiative/</guid><pubDate>Sat, 10 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It happens to all of us.&lt;/p&gt;
&lt;p&gt;Once in a while you stumble upon a problem that seems way too familiar. You remember that you’ve either solved it before or saw it in a blog post somewhere.&lt;/p&gt;
&lt;p&gt;You start browsing through Reddit, old projects and bookmarks, searching aggressively for that single line of code or function that you just need to copy-paste or at least take a glimpse at to remember what it was about. It’s just one “bit” that you need.&lt;/p&gt;
&lt;p&gt;Practical Haskell Bits is an initiative to contain as many of these as possible and become the go-to place for real-world patterns, snippets and popular library examples.&lt;/p&gt;
&lt;p&gt;Bits should be aimed towards &lt;strong&gt;everyone&lt;/strong&gt; in the community, regardless of their level of experience or understanding.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No example is too trivial!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Haskell community is often criticized for focusing on things that are way too complicated to outsiders (and frankly, most “intermediate” Haskellers as well) and pushing away beginners. This is true and in order to attract more people and have them become productive, we need to address it.&lt;/p&gt;
&lt;p&gt;Not everyone can figure out how to use a library by reading the source code.&lt;/p&gt;
&lt;p&gt;Some people will struggle with “basic” things such as parsing JSON or setting up a web server. It’s exactly these people that will not have the confidence to ask a question because seemingly everyone is busy looking at &lt;a href=&quot;https://www.reddit.com/r/haskell/comments/xah8v1/examples_of_compiler_optimizations_changing/&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;examples of compiler optimizations changing asymptotic complexity&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;What defines a Practical Haskell Bit?&lt;/h1&gt;
&lt;h4&gt;A Practical Haskell Bit is a &lt;strong&gt;mini-project&lt;/strong&gt; that:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Looks at a single, well-defined scenario&lt;/li&gt;
&lt;li&gt;Is of production quality&lt;/li&gt;
&lt;li&gt;Contains as little code and dependencies as possible&lt;/li&gt;
&lt;li&gt;Is self-contained and buildable on its own&lt;/li&gt;
&lt;li&gt;Reflects the current (or at least some) best practices&lt;/li&gt;
&lt;li&gt;Is suitable for copy-pasting or just refreshing your memory&lt;/li&gt;
&lt;li&gt;Has a sufficient, but not necessarily detailed explanation&lt;/li&gt;
&lt;li&gt;Aims to use terminology and examples as close to the real world as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;A Practical Haskell Bit is &lt;strong&gt;not&lt;/strong&gt;:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[Necessarily] a detailed tutorial&lt;/li&gt;
&lt;li&gt;An incomplete code snippet&lt;/li&gt;
&lt;li&gt;A full blown project example (e.g. &lt;a href=&quot;realworld.io&quot;&gt;realworld.io&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A blog post that you need to follow to put the code together&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Examples and non-examples:&lt;/h1&gt;
&lt;h4&gt;Good Practical Haskell Bit candidates:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Streaming &lt;code class=&quot;language-text&quot;&gt;persistent&lt;/code&gt; queries using &lt;code class=&quot;language-text&quot;&gt;conduit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integrating with an external API via &lt;code class=&quot;language-text&quot;&gt;servant-client&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Making your &lt;code class=&quot;language-text&quot;&gt;wai&lt;/code&gt; app AWS Lambda compatible&lt;/li&gt;
&lt;li&gt;Setting up your application monad and business logic with &lt;code class=&quot;language-text&quot;&gt;mtl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Protecting &lt;code class=&quot;language-text&quot;&gt;servant&lt;/code&gt; routes with a JWT token&lt;/li&gt;
&lt;li&gt;Using smart constructors&lt;/li&gt;
&lt;li&gt;Record update scenarios via &lt;code class=&quot;language-text&quot;&gt;lens&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Logging to multiple destinations (e.g. file + stdout) via &lt;code class=&quot;language-text&quot;&gt;katip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Property testing with &lt;code class=&quot;language-text&quot;&gt;QuickCheck&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Bad Practical Haskell Bit candidates:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A CRUD app&lt;/li&gt;
&lt;li&gt;A console game&lt;/li&gt;
&lt;li&gt;A snippet containing some part of a solution&lt;/li&gt;
&lt;li&gt;A snippet without sufficient context&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Reasoning&lt;/h1&gt;
&lt;p&gt;Having isolated and focused examples makes them a lot easier to search, develop and maintain. Full blown projects can quickly grow to gigantic proportions and make it confusing what the whole thing is about.&lt;/p&gt;
&lt;p&gt;While some of the aforementioned points might seem “too simple”, this will not be the case for everyone. It’s easy to remember how hard and confusing the Haskell space can be in the early days, especially with there usually being multiple “correct” ways of reaching the same destination.&lt;/p&gt;
&lt;h4&gt;Don’t we already have a ton of blog posts?&lt;/h4&gt;
&lt;p&gt;The Haskell space has been blessed with some pretty intelligent people and we’re lucky to have many of them share their thoughts and research via blog posts.&lt;/p&gt;
&lt;p&gt;While this is undisputably great, often times the level of abstraction is just too far from the “real world” for most people.&lt;/p&gt;
&lt;p&gt;As an example, contrast the practical &lt;code class=&quot;language-text&quot;&gt;DerivingVia&lt;/code&gt; trick that I’ve shown &lt;a href=&quot;/practical-haskell-deriving-via&quot;&gt;here&lt;/a&gt; that uses concepts familiar to everyone such as calling an external API, versus the &lt;a href=&quot;https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/deriving_via.html&quot;&gt;documentation&lt;/a&gt; that talks about Kleisli arrows, &lt;code class=&quot;language-text&quot;&gt;Applicative&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Semigroup&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Contributing&lt;/h1&gt;
&lt;p&gt;I have set up a repository at &lt;a href=&quot;https://github.com/dnikolovv/practical-haskell&quot;&gt;dnikolovv/practical-haskell&lt;/a&gt; and added a couple of bits, with more coming in the following days.&lt;/p&gt;
&lt;p&gt;It would be great if you can provide feedback or submit your own examples. The hope is that eventually this initiative can grow into its own organization and become a cherished resource in the Haskell space.&lt;/p&gt;</content:encoded></item></channel></rss>